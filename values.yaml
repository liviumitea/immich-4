## This chart relies on the common library chart from bjw-s
## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

# These entries are shared between all the Immich components

env:
  REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
  DB_HOSTNAME: "{{ .Release.Name }}-postgresql"
  DB_USERNAME: "{{ .Values.postgresql.global.postgresql.auth.username }}"
  DB_DATABASE_NAME: "{{ .Values.postgresql.global.postgresql.auth.database }}"
  # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
  DB_PASSWORD: "{{ .Values.postgresql.global.postgresql.auth.password }}"
  IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'

image:
  tag: v1.132.3

immich:
  metrics:
    # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
    enabled: false
  persistence:
    # Main data store for all photos shared between different components.
    library:
      # Automatically creating the library volume is not supported by this chart
      # You have to specify an existing PVC to use
      existingClaim: immich-pvc
  # configuration is immich-config.json converted to yaml
  # ref: https://immich.app/docs/install/config-file/
  #
  configuration: {}
    # trash:
    #   enabled: false
    #   days: 30
    # storageTemplate:
    #   enabled: true
    #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

# Dependencies

# --- only the relevant section shown ---
postgresql:
   enabled: true
   image:
     registry: ghcr.io
     repository: immich-app/postgres
     tag: 14-vectorchord0.3.0-pgvectors0.2.0
     # exact tag  digest from the current compose file
     tag: 14-vectorchord0.4.3-pgvectors0.2.0@sha256:5f6a838e4e44c8e0e019d0ebfe3ee8952b69afc2809b2c25f7b0119641978e91

   # everything below **overrides** Bitnami defaults so the
   # upstream postgres image can start successfully
   primary:
     # Mount where upstream postgres expects it
     persistence:
       mountPath: /var/lib/postgresql/data
 
     extraEnvVars:
       # keep the credentials in one place â€“ reuse the Bitnami values
       - name: POSTGRES_USER
         value: "immich"                # = .Values.postgresql.global.postgresql.auth.username
       - name: POSTGRES_PASSWORD
         value: "immich"                # = .Values.postgresql.global.postgresql.auth.password
       - name: POSTGRES_DB
         value: "immich"                # = .Values.postgresql.global.postgresql.auth.database
       # optional, but silences a warning in the entrypoint
       - name: DB_STORAGE_TYPE
         value: "HDD"
 
     # Bitnami sets a readonly root FS; disable that or the
     # upstream entrypoint cannot copy its config template
     containerSecurityContext:
       enabled: false
 
     # PGDATA must point at the new mountPath
     extraEnvVarsCM: |
       PGDATA: "/var/lib/postgresql/data"


redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false

# Immich components

server:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-server
    pullPolicy: IfNotPresent
  ingress:
    main:
      enabled: false
      annotations:
        # proxy-body-size is set to 0 to remove the body limit on file uploads
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
      hosts:
        - host: immich.local
          paths:
            - path: "/"
      tls: []

machine-learning:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-machine-learning
    pullPolicy: IfNotPresent
  env:
    TRANSFORMERS_CACHE: /cache
  persistence:
    cache:
      enabled: true
      size: 10Gi
      # Optional: Set this to pvc to avoid downloading the ML models every start.
      type: emptyDir
      accessMode: ReadWriteMany
      # storageClass: your-class
